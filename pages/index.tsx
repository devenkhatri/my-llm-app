import Head from "next/head";
import Image from "next/image";
import { Geist, Geist_Mono } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useState } from 'react';
import TextareaAutosize from 'react-textarea-autosize';
import ModelDropdown from "@/components/ModelDropdown";
import { Textarea } from "@nextui-org/input";
import { Button, Card, CardBody, CardFooter, CardHeader, Chip, Code } from "@nextui-org/react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

type Model = {
  id: string;
  description: string;
  architecture: {
    modality: string;
  };
};

export default function Home() {
  const [prompt, setPrompt] = useState('');
  const [isPromptValid, setIsPromptValid] = useState(true);
  const [script, setScript] = useState('');
  const [loading, setLoading] = useState(false);
  const [selectedModel, setSelectedModel] = useState<Model | null>(null);

  const BrandIcon = () => {
    return (
      <Image
        className={styles.logo}
        src="/vercel.svg"
        alt="Vercel logomark"
        width={20}
        height={20}
      />
    );
  }

  const handleModelSelect = (model: Model | null) => {
    setSelectedModel(model);
    console.log("Selected Model:", model);
  };

  const generateScript = async () => {
    setIsPromptValid(true);
    if (!prompt || prompt.length <= 0) { setIsPromptValid(false); return; }
    setLoading(true);
    const response = await fetch('/api/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt, model: selectedModel?.id }),
    });

    const data = await response.json();
    setScript(data.script);
    setLoading(false);
  };

  return (
    <>
      <Head>
        <title>LLM AI Generator</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
      >
        <main className={styles.main}>
          <h1>LLM AI Generator</h1>
          <ol>
            <li>
              Get started by entering the <code>prompt</code>.
            </li>
            <li>See your generated response in <code>output box</code>.</li>
          </ol>

          <div className="w-full grid gap-2">
            <Card>
              <CardBody>
                <ModelDropdown onModelSelect={handleModelSelect} />
                {selectedModel && (
                  <Card>
                    <CardHeader><Chip color="primary" variant="dot">Selected Model</Chip></CardHeader>
                    <CardBody>
                      <Code>
                        <p>
                          <strong>Name:</strong> {selectedModel.id}
                        </p>
                        <p>
                          <strong>Description:</strong> {selectedModel.description}
                        </p>
                        <p>
                          <strong>Modality:</strong> {selectedModel.architecture.modality}
                        </p>
                      </Code>
                    </CardBody>
                  </Card>
                )}
              </CardBody>
            </Card>
            <Card>
              <CardBody>
                <Textarea
                  isRequired
                  isInvalid={!isPromptValid}
                  color="primary"
                  errorMessage="The prompt cannot be empty"
                  className="w-full"
                  minRows={5}
                  label="Input Prompt"
                  labelPlacement="inside"
                  placeholder="Enter your prompt here..."
                  value={prompt}
                  onValueChange={(e) => setPrompt(e)}
                  variant={'bordered'}
                  isClearable
                  onClear={() => console.log("textarea cleared")}
                />
              </CardBody>
            </Card>
            <div>
              <Button
                isLoading={loading}
                variant="solid"
                color="primary"
                startContent={<BrandIcon />}
                radius="full"
                onPress={generateScript}
              >
                Hit LLM
              </Button>
            </div>
            <Card>
              <CardBody>
                <div className="text-success text-lg">Generated Output:</div>
                <Textarea
                  isReadOnly
                  className="w-full"
                  color="success"
                  minRows={5}
                  label="Response"
                  labelPlacement="inside"
                  placeholder="Response will come here..."
                  value={script}
                  onValueChange={(e) => setPrompt(e)}
                  variant={'bordered'}
                />
              </CardBody>
            </Card>
          </div>
        </main>
      </div>
    </>
  );
}
